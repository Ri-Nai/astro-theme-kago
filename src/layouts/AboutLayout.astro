---
import BaseLayout from "./BaseLayout.astro";
import { getAssetPath } from "../utils/pathUtils";
import { getSvgContents } from "../utils/svgUtils";
import { profileConfig } from "@site.config";
import { markdown } from "@astropub/md";
import "../styles/global.css";

export interface Props {
  title: string;
  description?: string;
  hero?: {
    title: string;
    subtitle?: string;
    description?: string | string[];
    avatar?: string;
  };
  sections?: Array<{
    id: string;
    title: string;
    icon?: string;
    type: "text" | "timeline" | "grid" | "contact";
    content?: any;
    renderedContent?: string;
  }>;
}

const { title, description, hero, sections } = Astro.props;
const socialLinks = profileConfig.socialLinks;
const svgContents = getSvgContents(socialLinks);

// 预处理 hero description 和 subtitle
let renderedHeroDescription: string[] | string | null = null;
let renderedHeroSubtitle: string | null = null;

if (hero?.description) {
  if (Array.isArray(hero.description)) {
    renderedHeroDescription = await Promise.all(
      hero.description.map(async (desc) => await markdown(desc)),
    );
  } else {
    renderedHeroDescription = await markdown(hero.description);
  }
}

if (hero?.subtitle) {
  renderedHeroSubtitle = await markdown(hero.subtitle);
}

// 预处理 sections，渲染 Markdown 内容
const processedSections = await Promise.all(
  sections?.map(async (section) => {
    const processedSection = { ...section };

    // 处理 text 类型的 content
    if (section.type === "text" && section.content) {
      const content =
        typeof section.content === "string"
          ? section.content
          : section.content.text;
      if (content) {
        console.log(content);
        processedSection.renderedContent = await markdown(content);
      }
    }

    // 处理 grid 类型的 items description
    if (section.type === "grid" && section.content?.items) {
      processedSection.content = {
        ...section.content,
        items: await Promise.all(
          section.content.items.map(async (item: any) => {
            if (item.description) {
              return {
                ...item,
                renderedDescription: await markdown(item.description),
              };
            }
            return item;
          }),
        ),
      };
    }

    return processedSection;
  }) || [],
);
---

<BaseLayout title={title} description={description}>
  <slot name="navigation" />
  <div class="about-content">
    <div class="container">
      <!-- Hero Section -->
      {
        hero && (
          <section class="hero-section">
            <div class="hero-content">
              {hero.avatar && (
                <div class="avatar-section">
                  <img
                    src={getAssetPath(hero.avatar)}
                    alt={`${hero.title} 头像`}
                    class="avatar"
                    loading="eager"
                    onerror={`this.src='${getAssetPath("/imgs/default-avatar.svg")}'`}
                  />
                  <div class="avatar-decoration" />
                </div>
              )}
              <h1 class="hero-title">{hero.title}</h1>
              {renderedHeroSubtitle && (
                <div class="hero-subtitle" set:html={renderedHeroSubtitle} />
              )}
              {renderedHeroDescription && (
                <div class="hero-description">
                  {Array.isArray(renderedHeroDescription) ? (
                    renderedHeroDescription.map((desc) => (
                      <div set:html={desc} />
                    ))
                  ) : (
                    <div set:html={renderedHeroDescription} />
                  )}
                </div>
              )}
            </div>
          </section>
        )
      }

      <!-- Dynamic Sections -->
      {
        processedSections?.map((section) => (
          <section class={`${section.type}-section`}>
            <h2 class="section-title">
              {section.icon && <span class="title-icon">{section.icon}</span>}
              {section.title}
            </h2>

            {section.type === "text" && section.renderedContent && (
              <div class="text-content">
                <div set:html={section.renderedContent} />
              </div>
            )}

            {section.type === "timeline" && section.content && (
              <div class="timeline-content">
                {section.content.items?.map((item: any) => (
                  <div class="timeline-item">
                    <div class="timeline-year">{item.year}</div>
                    <div class="timeline-content-item">
                      <h3 class="timeline-title">{item.title}</h3>
                      <p class={`timeline-result ${item.resultClass || ""}`}>
                        {item.result}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            )}

            {section.type === "grid" && section.content && (
              <div class="grid-content">
                {section.content.items?.map((item: any) => (
                  <div class="grid-item">
                    <h3 class="grid-item-title">{item.title}</h3>
                    {item.renderedDescription && (
                      <div
                        class="grid-item-description"
                        set:html={item.renderedDescription}
                      />
                    )}
                    {item.tags && (
                      <div class="grid-item-tags">
                        {item.tags.map((tag: string) => (
                          <span class="grid-item-tag">{tag}</span>
                        ))}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            )}

            {section.type === "contact" && socialLinks && (
              <div class="contact-content">
                <div class="contact-methods">
                  {socialLinks.map((link) => (
                    <a
                      href={link.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="contact-item"
                    >
                      <div class="contact-icon">
                        {link.icon.startsWith("http") ||
                        link.icon.startsWith("/") ? (
                          <div
                            class="contact-icon-svg"
                            set:html={svgContents[link.icon]}
                          />
                        ) : (
                          link.icon
                        )}
                      </div>
                      <div class="contact-info">
                        <h3 class="contact-title">{link.name}</h3>
                      </div>
                    </a>
                  ))}
                </div>
              </div>
            )}
          </section>
        ))
      }

      <!-- Markdown content slot -->
      <slot />
    </div>
  </div>
</BaseLayout>

<style>
  .about-content {
    padding: 2rem 0;
  }

  .container {
    max-width: 1000px;
    margin: 0 auto;
    padding: 0 1rem;
  }

  /* Hero Section */
  .hero-section {
    text-align: center;
    padding: 4rem 0;
    margin-bottom: 4rem;
    background: linear-gradient(
      135deg,
      var(--bg-soft) 0%,
      var(--bg-primary) 100%
    );
    border-radius: 24px;
    border: 1px solid var(--border-color);
    position: relative;
    overflow: hidden;
  }

  .hero-content {
    position: relative;
    z-index: 2;
  }

  .avatar-section {
    position: relative;
    display: inline-block;
    margin-bottom: 2rem;
  }

  .avatar {
    width: 150px;
    height: 150px;
    border-radius: 50%;
    border: 4px solid var(--brand-primary);
    box-shadow: var(--blog-shadow-3);
    object-fit: cover;
    transition: var(--blog-transition);
  }

  .avatar:hover {
    transform: scale(1.05) rotate(5deg);
  }

  .avatar-decoration {
    position: absolute;
    top: -10px;
    right: -10px;
    width: 40px;
    height: 40px;
    background: linear-gradient(
      135deg,
      var(--brand-primary),
      var(--brand-light)
    );
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.2rem;
    animation: bounce 2s infinite;
  }

  .avatar-decoration::after {
    content: "✨";
  }

  @keyframes bounce {
    0%,
    20%,
    50%,
    80%,
    100% {
      transform: translateY(0);
    }
    40% {
      transform: translateY(-10px);
    }
    60% {
      transform: translateY(-5px);
    }
  }

  .hero-title {
    font-size: 3rem;
    font-weight: 700;
    color: var(--brand-primary);
    margin-bottom: 1rem;
    display: inline-block;
  }

  .hero-subtitle {
    font-size: 1.25rem;
    color: var(--text-secondary);
    margin-bottom: 2rem;
    font-weight: 300;
  }

  .hero-subtitle code {
    background: var(--bg-soft);
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-family: "Fira Code", "Consolas", monospace;
    color: var(--brand-primary);
  }

  .hero-description {
    max-width: 600px;
    margin: 0 auto;
    color: var(--text-secondary);
    line-height: 1.6;
  }

  .hero-description p {
    margin: 0.5rem 0;
  }

  /* Section Styles */
  section {
    margin-bottom: 4rem;
  }

  .section-title {
    font-size: 2rem;
    font-weight: 600;
    color: var(--text-primary);
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 2rem;
    text-align: center;
    justify-content: center;
  }

  .title-icon {
    font-size: 1.8rem;
  }

  /* Text Content */
  .text-content {
    background: var(--bg-primary);
    border: 1px solid var(--border-color);
    border-radius: var(--blog-radius-md);
    padding: 2rem;
    line-height: 1.6;
    color: var(--text-secondary);
  }

  .text-content a {
    color: var(--brand-primary);
    text-decoration: none;
    font-weight: 500;
  }

  .text-content a:hover {
    text-decoration: underline;
  }

  .text-content p {
    margin: 1rem 0;
  }

  /* Timeline Content */
  .timeline-content {
    max-width: 800px;
    margin: 0 auto;
    position: relative;
  }

  .timeline-content::before {
    content: "";
    position: absolute;
    left: 50%;
    top: 0;
    bottom: 0;
    width: 2px;
    background: var(--border-color);
    transform: translateX(-50%);
  }

  .timeline-item {
    display: flex;
    align-items: center;
    margin-bottom: 3rem;
    position: relative;
  }

  .timeline-item:nth-child(odd) {
    flex-direction: row;
  }

  .timeline-item:nth-child(even) {
    flex-direction: row-reverse;
  }

  .timeline-year {
    flex-shrink: 0;
    width: 100px;
    text-align: center;
    font-weight: 700;
    color: var(--brand-primary);
    background: var(--bg-primary);
    border: 2px solid var(--brand-primary);
    border-radius: var(--blog-radius-lg);
    padding: 0.5rem;
    position: relative;
    z-index: 2;
  }

  .timeline-content-item {
    flex: 1;
    background: var(--bg-primary);
    border: 1px solid var(--border-color);
    border-radius: var(--blog-radius-md);
    padding: 2rem;
    margin: 0 2rem;
    transition: var(--blog-transition);
  }

  .timeline-content-item:hover {
    transform: translateY(-4px);
    box-shadow: var(--blog-shadow-2);
    border-color: var(--brand-primary);
  }

  .timeline-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 0.75rem;
  }

  .timeline-result {
    color: var(--text-secondary);
    font-weight: 500;
    margin: 0;
  }

  .timeline-result.bronze {
    color: #cd7f32;
  }

  .timeline-result.silver {
    color: #c0c0c0;
  }

  /* Grid Content */
  .grid-content {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
  }

  .grid-item {
    background: var(--bg-primary);
    border: 1px solid var(--border-color);
    border-radius: var(--blog-radius-md);
    padding: 2rem;
    transition: var(--blog-transition);
  }

  .grid-item:hover {
    transform: translateY(-4px);
    box-shadow: var(--blog-shadow-2);
    border-color: var(--brand-primary);
  }

  .grid-item-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 1rem;
  }

  .grid-item-description {
    color: var(--text-secondary);
    line-height: 1.6;
    margin: 0.75rem 0;
  }

  .grid-item-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .grid-item-tag {
    background: var(--bg-soft);
    color: var(--brand-primary);
    padding: 0.25rem 0.75rem;
    border-radius: 12px;
    font-size: 0.8rem;
    font-weight: 500;
    border: 1px solid var(--brand-primary);
  }

  /* Contact Content */
  .contact-content {
    text-align: center;
  }

  .contact-methods {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 1.5rem;
  }

  .contact-item {
    display: flex;
    align-items: center;
    gap: 1.5rem;
    background: var(--bg-primary);
    border: 1px solid var(--border-color);
    border-radius: var(--blog-radius-md);
    padding: 2rem;
    text-decoration: none;
    transition: var(--blog-transition);
  }

  .contact-item:hover {
    transform: translateY(-4px);
    box-shadow: var(--blog-shadow-2);
    border-color: var(--brand-primary);
  }

  .contact-icon {
    font-size: 2.5rem;
    flex-shrink: 0;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .contact-icon-svg {
    width: 2.5rem;
    height: 2.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--text-primary);
    transition: var(--blog-transition);
  }

  .contact-icon-svg svg {
    width: 100%;
    height: 100%;
    fill: currentColor;
    stroke: currentColor;
  }

  .contact-item:hover .contact-icon-svg {
    color: var(--brand-primary);
    transform: scale(1.1);
  }

  .contact-info {
    flex: 1;
    text-align: left;
  }

  .contact-title {
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--text-primary);
    margin: 0;
  }

  /* Markdown Content */
  .markdown-content {
    background: var(--bg-primary);
    border: 1px solid var(--border-color);
    border-radius: var(--blog-radius-md);
    padding: 2rem;
    line-height: 1.6;
    color: var(--text-secondary);
  }

  .markdown-content h2 {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--text-primary);
    margin: 2rem 0 1rem 0;
  }

  .markdown-content h2:first-child {
    margin-top: 0;
  }

  .markdown-content p {
    margin: 1rem 0;
  }

  .markdown-content a {
    color: var(--brand-primary);
    text-decoration: none;
    font-weight: 500;
  }

  .markdown-content a:hover {
    text-decoration: underline;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .hero-title {
      font-size: 2rem;
    }

    .avatar {
      width: 120px;
      height: 120px;
    }

    .section-title {
      font-size: 1.75rem;
      text-align: left;
      justify-content: flex-start;
    }

    .grid-content {
      grid-template-columns: 1fr;
    }

    .contact-methods {
      grid-template-columns: 1fr;
    }

    .contact-item {
      padding: 1.5rem;
    }

    /* Timeline responsive */
    .timeline-content::before {
      left: 30px;
    }

    .timeline-item {
      flex-direction: row !important;
      padding-left: 80px;
    }

    .timeline-item:nth-child(even) {
      flex-direction: row !important;
    }

    .timeline-year {
      position: absolute;
      left: 0;
      width: 60px;
      font-size: 0.8rem;
      padding: 0.25rem;
    }

    .timeline-content-item {
      margin: 0;
      flex: 1;
    }
  }

  @media (max-width: 480px) {
    .hero-title {
      font-size: 1.75rem;
    }

    .avatar {
      width: 100px;
      height: 100px;
    }

    .grid-item,
    .timeline-content-item,
    .text-content {
      padding: 1.5rem;
    }

    .contact-item {
      flex-direction: column;
      text-align: center;
      gap: 1rem;
    }

    .contact-info {
      text-align: center;
    }
  }
</style>
