---
import BaseLayout from './BaseLayout.astro';
import Navigation from '../components/Navigation.astro';
import Gallery from '../components/Gallery.astro';
import ProfileCard from '../components/ProfileCard.astro';
import TOC from '../components/TOC.astro';
import Image from '../components/Image.astro';
import GalleryBreak from '../components/GalleryBreak.astro';
import { getAssetPath, getNavPath, getBlogListPath, getBlogPostPath } from '../utils/pathUtils';
import '../styles/global.css';
import '../styles/blog-content.css';

export interface Props {
  post: any;
  headings: any[];
  readingTime: any;
  relatedPosts: any[];
}

const { post, headings, readingTime, relatedPosts } = Astro.props;

const formatDate = (date: Date) => {
  return date.toLocaleDateString('zh-CN', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};
---

<BaseLayout
  title={post.data.title}
  description={post.data.description || `阅读文章：${post.data.title}`}
  image={post.data.heroImage}
>
  {post.data.math && (
    <style slot="head">
      /* 现代数学字体优化 - 使用Libertinus Math */
      .katex {
        font-family: 'Libertinus Math', 'STIX Two Math', 'TeX Gyre Termes Math', 'Libertinus Serif', 'KaTeX_Main', 'Cambria Math', 'Times New Roman', serif !important;
        font-size: 1.15em;
        color: var(--text-primary);
        line-height: 1.6;
        font-weight: 400;
        font-variant: normal;
        font-feature-settings: "kern" 1, "liga" 1, "calt" 1;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        text-rendering: optimizeLegibility;
      }

      /* 数学符号专用样式 */
      .katex .mord {
        font-style: normal;
      }

      .katex .mathit {
        font-style: italic;
      }

      /* 优雅的块级公式样式 - 针对MathML和KaTeX */
      .katex-display,
      .katex:has(math[display="block"]),
      span.katex:has(math[display="block"]) {
        display: block;
        margin: 2.5em 0;
        text-align: center;
        padding: 2em 1.5em;
        background: linear-gradient(135deg,
          var(--bg-secondary) 0%,
          var(--bg-soft) 50%,
          var(--bg-secondary) 100%);
        border: 1px solid var(--border-color);
        border-left: 4px solid var(--brand-primary);
        border-radius: 16px;
        box-shadow: var(--blog-shadow-2);
        overflow-x: auto;
        overflow-y: hidden;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
      }

      .katex-display::before,
      .katex:has(math[display="block"])::before,
      span.katex:has(math[display="block"])::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 1px;
        background: linear-gradient(90deg,
          transparent 0%,
          var(--border-color) 50%,
          transparent 100%);
      }

      .katex-display:hover,
      .katex:has(math[display="block"]):hover,
      span.katex:has(math[display="block"]):hover {
        background: linear-gradient(135deg,
          var(--bg-primary) 0%,
          var(--bg-mute) 50%,
          var(--bg-primary) 100%);
        border-color: var(--brand-primary);
        border-left-color: var(--brand-primary);
        box-shadow: var(--blog-shadow-3);
        transform: translateY(-2px);
      }

      .katex-display .katex {
        font-size: 1.3em;
        display: inline-block;
        padding: 0;
        font-weight: 400;
        letter-spacing: 0.02em;
      }

      /* 优雅的行内公式样式 */
      .katex-inline {
        margin: 0 0.15em;
        padding: 0.1em 0.2em;
        background: var(--bg-soft);
        border-radius: 4px;
        font-weight: 400;
        transition: all 0.2s ease;
        display: inline-block;
        vertical-align: baseline;
        border: 1px solid var(--border-color);
      }

      .katex-inline:hover {
        background: var(--bg-mute);
        transform: scale(1.02);
        border-color: var(--brand-primary);
      }

      /* LaTeX 风格数学符号渲染 */
      .katex .mord,
      .katex .mrel,
      .katex .mbin,
      .katex .mop {
        font-weight: 400;
      }

      /* 保持 LaTeX 原生分数线样式 */
      .katex .frac-line {
        border-bottom-color: currentColor;
        border-bottom-width: 0.04em;
      }

      /* LaTeX 风格根号 */
      .katex .sqrt > .root {
        color: currentColor;
        font-weight: 400;
      }

      /* LaTeX 风格积分符号 */
      .katex .mop.op-symbol {
        color: currentColor;
        font-weight: 400;
      }

      /* LaTeX 风格括号和分隔符 */
      .katex .delimsizing,
      .katex .delim-size1,
      .katex .delim-size2,
      .katex .delim-size3,
      .katex .delim-size4 {
        color: currentColor;
        font-weight: 400;
      }

      /* LaTeX 风格上下标 */
      .katex .msupsub {
        font-weight: 400;
      }

      /* 优化希腊字母和变量显示 */
      .katex .mathdefault {
        font-style: italic;
        font-weight: 400;
        letter-spacing: 0.01em;
      }

      /* 特殊数学符号优化 */
      .katex .mord.mathdefault,
      .katex .mord.mathrm {
        font-family: 'Libertinus Math', 'STIX Two Math', 'TeX Gyre Termes Math', serif;
      }

      /* 数学运算符优化 */
      .katex .mop {
        font-family: 'Libertinus Math', 'STIX Two Math', serif;
        font-size: 1.1em;
      }

      /* 积分、求和等大型运算符 */
      .katex .op-symbol.large-op {
        font-size: 1.8em;
        font-family: 'Libertinus Math', 'STIX Two Math', serif;
      }

      /* 分数线优化 */
      .katex .frac-line {
        border-bottom-width: 0.06em;
        border-radius: 0.5px;
      }

      /* 根号优化 */
      .katex .sqrt .sqrt-line {
        border-top-width: 0.06em;
      }

      /* 手动白天模式明确适配 */
      [data-theme="light"] .katex-display,
      [data-theme="light"] .katex:has(math[display="block"]),
      [data-theme="light"] span.katex:has(math[display="block"]) {
        background: linear-gradient(135deg,
          var(--bg-secondary) 0%,
          var(--bg-soft) 50%,
          var(--bg-secondary) 100%);
        border-color: var(--border-color);
        box-shadow: var(--blog-shadow-2);
      }

      [data-theme="light"] .katex-display::before,
      [data-theme="light"] .katex:has(math[display="block"])::before,
      [data-theme="light"] span.katex:has(math[display="block"])::before {
        background: linear-gradient(90deg,
          transparent 0%,
          var(--border-color) 50%,
          transparent 100%);
      }

      [data-theme="light"] .katex-display:hover,
      [data-theme="light"] .katex:has(math[display="block"]):hover,
      [data-theme="light"] span.katex:has(math[display="block"]):hover {
        background: linear-gradient(135deg,
          var(--bg-primary) 0%,
          var(--bg-mute) 50%,
          var(--bg-primary) 100%);
        border-color: var(--brand-primary);
        box-shadow: var(--blog-shadow-3);
      }

      /* 手动暗色主题适配 */
      [data-theme="dark"] .katex-display,
      [data-theme="dark"] .katex:has(math[display="block"]),
      [data-theme="dark"] span.katex:has(math[display="block"]) {
        background: linear-gradient(135deg,
          var(--bg-secondary) 0%,
          var(--bg-soft) 50%,
          var(--bg-secondary) 100%);
        border-color: var(--border-color);
        box-shadow: var(--blog-shadow-2);
      }

      [data-theme="dark"] .katex-display::before,
      [data-theme="dark"] .katex:has(math[display="block"])::before,
      [data-theme="dark"] span.katex:has(math[display="block"])::before {
        background: linear-gradient(90deg,
          transparent 0%,
          var(--border-color) 50%,
          transparent 100%);
      }

      [data-theme="dark"] .katex-display:hover,
      [data-theme="dark"] .katex:has(math[display="block"]):hover,
      [data-theme="dark"] span.katex:has(math[display="block"]):hover {
        background: linear-gradient(135deg,
          var(--bg-primary) 0%,
          var(--bg-mute) 50%,
          var(--bg-primary) 100%);
        border-color: var(--brand-primary);
        box-shadow: var(--blog-shadow-3);
      }

      /* 系统暗色主题适配（保留作为后备） */
      @media (prefers-color-scheme: dark) {
        :root:not([data-theme]) .katex-display,
        :root:not([data-theme]) .katex:has(math[display="block"]),
        :root:not([data-theme]) span.katex:has(math[display="block"]) {
          background: linear-gradient(135deg,
            var(--bg-secondary) 0%,
            var(--bg-soft) 50%,
            var(--bg-secondary) 100%);
          border-color: var(--border-color);
          box-shadow: var(--blog-shadow-2);
        }

        :root:not([data-theme]) .katex-display::before,
        :root:not([data-theme]) .katex:has(math[display="block"])::before,
        :root:not([data-theme]) span.katex:has(math[display="block"])::before {
          background: linear-gradient(90deg,
            transparent 0%,
            var(--border-color) 50%,
            transparent 100%);
        }

        :root:not([data-theme]) .katex-display:hover,
        :root:not([data-theme]) .katex:has(math[display="block"]):hover,
        :root:not([data-theme]) span.katex:has(math[display="block"]):hover {
          background: linear-gradient(135deg,
            var(--bg-primary) 0%,
            var(--bg-mute) 50%,
            var(--bg-primary) 100%);
          border-color: var(--brand-primary);
          box-shadow: var(--blog-shadow-3);
        }
      }

      /* 响应式数学公式 */
      @media (max-width: 768px) {
        .katex {
          font-size: 1.1em;
        }

        .katex-display,
        .katex:has(math[display="block"]),
        span.katex:has(math[display="block"]) {
          margin: 1.8em 0;
          padding: 1.5em 1em;
          border-left-width: 3px;
          border-radius: 12px;
          background: linear-gradient(135deg,
            var(--bg-secondary) 0%,
            var(--bg-soft) 100%);
        }

        .katex-display .katex {
          font-size: 1.15em;
          padding: 0;
        }

        .katex-display:hover,
        .katex:has(math[display="block"]):hover,
        span.katex:has(math[display="block"]):hover {
          transform: translateY(-1px);
          box-shadow: var(--blog-shadow-2);
        }

        .katex-inline {
          margin: 0 0.1em;
          padding: 0.05em 0.15em;
        }
      }

      @media (max-width: 480px) {
        .katex {
          font-size: 1.05em;
        }

        .katex-display,
        .katex:has(math[display="block"]),
        span.katex:has(math[display="block"]) {
          margin: 1.5em 0;
          padding: 1.2em 0.8em;
          border-radius: 10px;
          background: linear-gradient(135deg,
            var(--bg-secondary) 0%,
            var(--bg-soft) 100%);
          border-left-width: 2px;
        }

        .katex-display .katex {
          font-size: 1.1em;
          padding: 0;
        }

        .katex-display:hover,
        .katex:has(math[display="block"]):hover,
        span.katex:has(math[display="block"]):hover {
          transform: none;
          box-shadow: var(--blog-shadow-1);
        }

        /* 移动端手动暗色主题适配 */
        [data-theme="dark"] .katex-display,
        [data-theme="dark"] .katex:has(math[display="block"]),
        [data-theme="dark"] span.katex:has(math[display="block"]) {
          background: linear-gradient(135deg,
            var(--bg-secondary) 0%,
            var(--bg-soft) 100%);
        }

        [data-theme="dark"] .katex-display:hover,
        [data-theme="dark"] .katex:has(math[display="block"]):hover,
        [data-theme="dark"] span.katex:has(math[display="block"]):hover {
          box-shadow: var(--blog-shadow-2);
        }

        /* 移动端系统暗色主题适配（后备） */
        @media (prefers-color-scheme: dark) {
          :root:not([data-theme]) .katex-display,
          :root:not([data-theme]) .katex:has(math[display="block"]),
          :root:not([data-theme]) span.katex:has(math[display="block"]) {
            background: linear-gradient(135deg,
              var(--bg-secondary) 0%,
              var(--bg-soft) 100%);
          }

          :root:not([data-theme]) .katex-display:hover,
          :root:not([data-theme]) .katex:has(math[display="block"]):hover,
          :root:not([data-theme]) span.katex:has(math[display="block"]):hover {
            box-shadow: var(--blog-shadow-2);
          }
        }
      }
    </style>
  )}
  
  <slot name="navigation" />
  
  <main>
    <article class="blog-post">
      <div class="container">
        <!-- 文章头部 -->
        <header class="post-header">
          {post.data.heroImage && (
            <div class="hero-image">
              <img src={getAssetPath(post.data.heroImage)} alt={post.data.title} />
              <div class="hero-overlay"></div>
            </div>
          )}

          <div class="post-meta-top">
            <nav class="breadcrumb">
              <a href={getNavPath("/")}>首页</a>
              <span class="separator">›</span>
              <a href={getNavPath("/blog")}>文章</a>
              <span class="separator">›</span>
              <span class="current">{post.data.title}</span>
            </nav>
          </div>

          <div class="post-title-section">
            <h1 class="post-title">{post.data.title}</h1>

            <div class="post-meta">
              <div class="meta-item">
                <span class="meta-icon">📅</span>
                <time datetime={post.data.pubDate.toISOString()}>
                  {formatDate(post.data.pubDate)}
                </time>
              </div>

              <div class="meta-item">
                <span class="meta-icon">✍️</span>
                <span>{post.data.author}</span>
              </div>

              <div class="meta-item">
                <span class="meta-icon">⏱️</span>
                <span>{readingTime.text}阅读</span>
              </div>

              {post.data.updatedDate && post.data.updatedDate !== post.data.pubDate && (
                <div class="meta-item">
                  <span class="meta-icon">🔄</span>
                  <span>更新于 {formatDate(post.data.updatedDate)}</span>
                </div>
              )}
            </div>

            <!-- 标签和分类 -->
            <div class="post-taxonomy">
              {post.data.category && (
                <a href={getBlogListPath({ category: post.data.category })} class="post-category">
                  <span class="category-icon">📂</span>
                  <span class="category-name">{post.data.category}</span>
                </a>
              )}

              {post.data.tags.length > 0 && (
                <div class="post-tags">
                  <span class="tags-label">🏷️ 标签：</span>
                  {post.data.tags.map((tag) => (
                    <a href={getBlogListPath({ tag })} class="tag-link">
                      {tag}
                    </a>
                  ))}
                </div>
              )}
            </div>
          </div>
        </header>

        <!-- 文章内容 -->
        <div class="post-content">
          <div class="content-wrapper">
            <div class="prose blog-content">
              <slot />
              <Gallery />
            </div>
          </div>

          <!-- 侧栏 -->
          <aside class="sidebar">
            <!-- 作者头像卡片 -->
            <ProfileCard />

            <!-- 目录导航 -->
            {headings && headings.length > 0 && <TOC headings={headings} />}
          </aside>
        </div>

        <!-- 文章底部 -->
        <footer class="post-footer">
          <div class="post-navigation">
            <a href={getNavPath("/blog")} class="back-to-list">
              <span class="nav-arrow">←</span>
              返回文章列表
            </a>
          </div>
        </footer>
      </div>
    </article>

    <!-- 相关文章 -->
    {relatedPosts.length > 0 && (
      <section class="related-posts">
        <div class="container">
          <h2 class="related-title">📚 相关文章</h2>
          <div class="related-grid">
            {relatedPosts.map((relatedPost) => (
              <article class="related-card">
                {relatedPost.data.heroImage && (
                  <div class="related-image">
                    <img src={getAssetPath(relatedPost.data.heroImage)} alt={relatedPost.data.title} />
                  </div>
                )}
                <div class="related-content">
                  <h3 class="related-post-title">
                    <a href={getBlogPostPath(relatedPost.slug)}>
                      {relatedPost.data.title}
                    </a>
                  </h3>
                  <div class="related-meta">
                    <time>{formatDate(relatedPost.data.pubDate)}</time>
                    {relatedPost.data.category && (
                      <span class="related-category">{relatedPost.data.category}</span>
                    )}
                  </div>
                  {relatedPost.data.description && (
                    <p class="related-excerpt">{relatedPost.data.description}</p>
                  )}
                </div>
              </article>
            ))}
          </div>
        </div>
      </section>
    )}
  </main>
</BaseLayout>

<style>
  .blog-post {
    padding: 2rem 0;
    min-height: calc(100vh - 4rem);
  }

  /* 文章头部 */
  .post-header {
    position: relative;
    margin-bottom: 3rem;
  }

  .hero-image {
    position: relative;
    height: 400px;
    overflow: hidden;
    border-radius: var(--blog-radius-lg);
    margin-bottom: 2rem;
    box-shadow: var(--blog-shadow-2);
  }

  .hero-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    margin: 0;
    border-radius: 0;
    box-shadow: none;
  }

  .hero-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      to bottom,
      rgba(0, 0, 0, 0.1) 0%,
      rgba(0, 0, 0, 0.3) 70%,
      rgba(0, 0, 0, 0.5) 100%
    );
  }

  .post-meta-top {
    margin-bottom: 2rem;
  }

  .breadcrumb {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.9rem;
    color: var(--text-secondary);
  }

  .breadcrumb a {
    color: var(--brand-primary);
    text-decoration: none;
    transition: var(--blog-transition);
  }

  .breadcrumb a:hover {
    color: var(--brand-dark);
  }

  .separator {
    color: var(--text-tertiary);
  }

  .current {
    color: var(--text-primary);
    font-weight: 500;
  }

  .post-title-section {
    text-align: center;
  }

  .post-title {
    font-size: 3rem;
    font-weight: 700;
    line-height: 1.2;
    color: var(--brand-primary);
    margin-bottom: 2rem;
    display: inline-block;
  }

  .post-meta {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: 2rem;
    margin-bottom: 2rem;
    font-size: 0.9rem;
    color: var(--text-secondary);
  }

  .meta-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .meta-icon {
    font-size: 1rem;
  }

  .post-taxonomy {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: 2rem;
    align-items: center;
  }

  .post-category {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: var(--brand-lighter);
    color: var(--brand-primary);
    padding: 0.5rem 1rem;
    border-radius: var(--blog-radius-lg);
    font-weight: 500;
    border: 1px solid var(--brand-primary);
    text-decoration: none;
    transition: var(--blog-transition);
  }

  .post-category:hover {
    background: var(--brand-primary);
    color: white;
    transform: translateY(-2px);
    box-shadow: var(--blog-shadow-2);
  }

  .post-tags {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    flex-wrap: wrap;
  }

  .tags-label {
    color: var(--text-secondary);
    font-weight: 500;
  }

  .tag-link {
    background: var(--bg-soft);
    color: var(--text-secondary);
    padding: 0.25rem 0.75rem;
    border-radius: var(--blog-radius-md);
    text-decoration: none;
    font-size: 0.85rem;
    border: 1px solid var(--border-color);
    transition: var(--blog-transition);
  }

  .tag-link:hover {
    background: var(--brand-lighter);
    color: var(--brand-primary);
    border-color: var(--brand-primary);
  }

  /* 文章内容 */
  .post-content {
    display: grid;
    grid-template-columns: 1fr 300px;
    gap: 3rem;
    align-items: start;
  }

  .content-wrapper {
    min-width: 0;
  }

  /* 侧栏样式 */
  .sidebar {
    position: sticky;
    top: 120px;
    max-height: calc(100vh - 140px);
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .prose {
    max-width: none;
    line-height: 1.8;
    font-family: var(--font-serif);
    font-size: 1.05rem;
    color: var(--text-primary);
  }

  .prose h2,
  .prose h3,
  .prose h4,
  .prose h5,
  .prose h6 {
    scroll-margin-top: 100px;
    position: relative;
    padding-left: 1rem;
  }

  .prose h2::before,
  .prose h3::before,
  .prose h4::before,
  .prose h5::before,
  .prose h6::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0.2em;
    bottom: 0.2em;
    width: 3px;
    background: var(--brand-primary);
    border-radius: 1px;
  }

  /* 正文段落优化 */
  .prose p {
    margin-bottom: 1.5rem;
    line-height: 1.8;
    text-align: justify;
    text-justify: inter-word;
    word-break: break-word;
    hyphens: auto;
  }

  /* 首段缩进 */
  .prose > p:first-of-type {
    text-indent: 2em;
  }

  /* 正文中的链接 */
  .prose a {
    color: var(--brand-primary);
    text-decoration: none;
    border-bottom: 1px solid transparent;
    padding-bottom: 1px;
    transition: var(--blog-transition);
  }

  .prose a:hover {
    color: var(--brand-dark);
    border-bottom-color: var(--brand-primary);
  }

  /* 正文中的强调文本 */
  .prose strong {
    color: var(--brand-primary);
    font-weight: 700;
  }

  .prose em {
    color: var(--text-secondary);
    font-style: italic;
  }

  /* 正文中的代码 */
  .prose :not(pre) > code {
    background: var(--bg-soft);
    color: var(--brand-primary);
    padding: 0.2rem 0.4rem;
    border-radius: var(--blog-radius-sm);
    font-size: 0.9rem;
    font-weight: 600;
    border: 1px solid var(--border-color);
    font-family: var(--font-mono);
  }

  .prose :not(pre) > code:hover {
    background: var(--brand-lighter);
    border-color: var(--brand-primary);
  }

  /* 文章底部 */
  .post-footer {
    margin-top: 4rem;
    padding-top: 2rem;
    border-top: 1px solid var(--border-color);
  }

  .post-navigation {
    margin-bottom: 2rem;
  }

  .back-to-list {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--brand-primary);
    text-decoration: none;
    font-weight: 500;
    transition: var(--blog-transition);
  }

  .back-to-list:hover {
    color: var(--brand-dark);
    transform: translateX(-4px);
  }

  .nav-arrow {
    transition: transform 0.2s ease;
  }

  .back-to-list:hover .nav-arrow {
    transform: translateX(-4px);
  }

  /* 相关文章 */
  .related-posts {
    background: var(--bg-soft);
    padding: 4rem 0;
    margin-top: 4rem;
  }

  .related-title {
    text-align: center;
    font-size: 2rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 3rem;
  }

  .related-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
  }

  .related-card {
    background: var(--bg-primary);
    border: 1px solid var(--border-color);
    border-radius: var(--blog-radius-md);
    overflow: hidden;
    transition: var(--blog-transition);
  }

  .related-card:hover {
    transform: translateY(-4px);
    box-shadow: var(--blog-shadow-2);
    border-color: var(--brand-primary);
  }

  .related-image {
    height: 160px;
    overflow: hidden;
  }

  .related-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    margin: 0;
    border-radius: 0;
    box-shadow: none;
    transition: transform 0.3s ease;
  }

  .related-card:hover .related-image img {
    transform: scale(1.05);
  }

  .related-content {
    padding: 1.5rem;
  }

  .related-post-title {
    margin: 0 0 0.75rem 0;
    font-size: 1.1rem;
    font-weight: 600;
  }

  .related-post-title a {
    color: var(--text-primary);
    text-decoration: none;
    transition: color 0.2s ease;
  }

  .related-post-title a:hover {
    color: var(--brand-primary);
  }

  .related-meta {
    display: flex;
    gap: 1rem;
    font-size: 0.85rem;
    color: var(--text-secondary);
    margin-bottom: 0.75rem;
  }

  .related-category {
    background: var(--brand-lighter);
    color: var(--brand-primary);
    padding: 0.2rem 0.5rem;
    border-radius: 6px;
    font-weight: 500;
  }

  .related-excerpt {
    color: var(--text-secondary);
    line-height: 1.6;
    margin: 0;
    font-size: 0.9rem;
  }

  /* 响应式设计 */
  @media (max-width: 1024px) {
    .post-content {
      grid-template-columns: 1fr;
      gap: 2rem;
    }

    .sidebar {
      position: static;
      max-height: none;
      flex-direction: row;
      overflow-x: auto;
      gap: 1rem;
    }

    .sidebar > * {
      flex-shrink: 0;
      min-width: 280px;
    }
  }

  @media (max-width: 768px) {
    .post-title {
      font-size: 2rem;
    }

    .post-meta {
      display: grid;
      grid-template-columns: 1fr 1fr;
      margin-bottom: 2rem;
      font-size: 0.9rem;
      color: var(--text-secondary);
      background: var(--bg-soft);
      padding: 1.5rem;
      border-radius: var(--blog-radius-lg);
      border: 1px solid var(--border-color);
      box-shadow: var(--blog-shadow-1);
      flex-direction: column;
      gap: 1rem;
      padding: 1rem;
    }

    .post-taxonomy {
      gap: 1rem;
    }

    .hero-image {
      height: 250px;
    }

    .breadcrumb {
      font-size: 0.8rem;
    }

    .current {
      display: none;
    }

    .related-grid {
      grid-template-columns: 1fr;
    }

    /* 移动端侧栏优化 */
    .sidebar {
      flex-direction: column;
      gap: 1.5rem;
    }

    .sidebar > * {
      min-width: auto;
    }

    /* 移动端正文优化 */
    .prose {
      font-size: 1rem;
      line-height: 1.7;
    }

    .prose p {
      margin-bottom: 1.25rem;
      line-height: 1.7;
    }

    .prose > p:first-of-type {
      text-indent: 1.5em;
    }

    .prose :not(pre) > code {
      font-size: 0.85rem;
      padding: 0.15rem 0.3rem;
    }
  }

  @media (max-width: 480px) {
    .post-title {
      font-size: 1.75rem;
    }

    .hero-image {
      height: 200px;
      margin-bottom: 1.5rem;
    }

    .post-header {
      margin-bottom: 2rem;
    }

    /* 小屏幕正文优化 */
    .prose {
      font-size: 0.95rem;
      line-height: 1.6;
    }

    .prose p {
      margin-bottom: 1rem;
      line-height: 1.6;
    }

    .prose > p:first-of-type {
      text-indent: 1em;
    }

    .prose :not(pre) > code {
      font-size: 0.8rem;
      padding: 0.1rem 0.25rem;
    }
  }
</style>

<script>
  // 为TOC链接添加平滑滚动（如果TOC组件存在的话）
  document.addEventListener('DOMContentLoaded', () => {
    const tocLinks = document.querySelectorAll('.toc-link');
    
    tocLinks.forEach((link) => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const href = link.getAttribute('href');
        if (href) {
          const target = document.querySelector(href);
          if (target) {
            target.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        }
      });
    });
  });
</script>